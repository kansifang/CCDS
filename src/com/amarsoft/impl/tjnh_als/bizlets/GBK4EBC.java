package com.amarsoft.impl.tjnh_als.bizlets;
/**
 *    本文件对外只提供两个函数 A2E , E2A，实现EBCDIC与GBK的数据相互转换</br>
 * 例如：</br>
 * ----------------------------</br>
 * 把String型str由GBK转码为EBCDIC码如下：</br>
 * new String(GBK4EBC.A2E(str.getBytes()));</br>
 * </p>
 * 把String型str由EBCDIC转码为GBK码如下：</br>
 * new String (GBK4EBC.E2A(str.getBytes());</br>
 * ----------------------------</br>
 * 
 * @author zrli in FuDian Bank
 * @time 2008-09-02
 * @version 1.0
 */
public class GBK4EBC {

	/**
	 * 本文件对外只提供两个函数 A2E , E2A，此函数提供对byte[]的A2E处理。
	 * @author zrli
	 * @param bytWhatever
	 * @return
	 */
	public static byte[] A2E(byte[] bytWhatever){
		char[] in =new char[bytWhatever.length];
		for(int i=0;i<bytWhatever.length;i++){
			in[i]=(char)(bytWhatever[i]&0x000000ff);//去掉前六个字节的ff值
		}
		int iLen=getA2ELen(in);//取转换后的数据长度
		byte[] bValue=new byte[iLen];
		char[] out =A2E(in,iLen);//取转换后的数据
		for(int i=0;i<out.length;i++){
			bValue[i]=(byte)(out[i]&0x000000ff);
		}
		return bValue;
	}
	/**
	 * 本文件对外只提供两个函数 A2E , E2A，此函数提供对byte[]的E2A处理。
	 * @author zrli
	 * @param bytWhatever
	 * @return
	 */
	public static byte[] E2A(byte[] bytWhatever){
		char[] in =new char[bytWhatever.length];
		for(int i=0;i<bytWhatever.length;i++){
			in[i]=(char)(bytWhatever[i]&0x000000ff);//去掉前六个字节的ff值
		}
		int iLen=getE2ALen(in);//取转换后的数据长度
		byte[] bValue=new byte[iLen];
		char[] out =E2A(in,iLen);//取转换后的数据
		for(int i=0;i<out.length;i++){
			bValue[i]=(byte)(out[i]&0x000000ff);
		}
		return bValue;
	}
	/**
	 * TURN CODE UNIX(ASCII & GBK ) to AS400( EBCDIC )
	 * @author zrli
	 * @param in
	 * @param len
	 * @return
	 */
	public static char[] A2E(char[] in,int len) {
		int i, o = 0;
		char ch;
		char out[] =new char[len];
		char[] wi = new char[2];
		char[] wo = new char[2];
		int num_of_space_for_chinese = 0;

		for (i = 0; i < in.length; i++) {
			ch = in[i];
			if (is_GBK(ch)) {
				out[o++] = 0x0E;
				while ((i < in.length) && is_GBK(ch)) {
					wi[0] = ch;//双字节高位
					wi[1] = in[++i];//双字节低位
					wo = GBK_to_EBC(wi);//进行GBK->EBC的转换
					out[o++] = wo[0];//双字节高位
					out[o++] = wo[1];//双字节低位
					i++;//此while循环中每次判断高位是否在GBK范围内，如果是那么就要对高位、低位两位进行转抑换
					if(i<in.length)
						ch = in[i];
				}
				out[o++] = 0x0F;
				i--;
				num_of_space_for_chinese = num_of_space_for_chinese + 2;
			} else {
				//如果字符串中间有空格就跳过那么开放以下代码
				/*
				if (ch == 0x20)
					if (num_of_space_for_chinese != 0) {
						num_of_space_for_chinese--;
						continue;
					}
				*/
				out[o++] = char_a2e(ch);
			}
		}
		return out;
	}

	/**
	 * TURN CODE AS400( EBCDIC ) to UNIX(ASCII & GBK )
	 */
	public static char[] E2A(char[] in, int len) {
		int i, o = 0;
		char ch;
		char[] out = new char[len];//转换后的数据，如果存在中文，转换后的数据会比原数据长度短
		char[] wi = new char[2];
		char[] wo = new char[2];
		int iInLen = in.length;//原数据长度
		for (i = 0; i < iInLen; i++) {
			ch = in[i];
			if (is_EBC_chinese_begin(ch)) {
				ch = in[++i];
				while ((i < iInLen) && !(is_EBC_chinese_end(ch))) {
					if(o>=len-1){
						ch = in[++i];
						continue;//如果已经到了最后一个字符就不用转码了
					}
					wi[0] = ch;
					wi[1] = in[++i];
					wo = EBC_to_GBK(wi);//进行EBCDID码到GBK码的转换
					out[o++] = wo[0];
					out[o++] = wo[1];
					i++;
					if(i<iInLen)
						ch = in[i];
				}
				// 转换输入的EBCDIC汉字双字节字符串后,转换后的ASCII汉字符串可以在后面增加两个空格
				// 如果为保证输入与输出长度一致时，可以放开以下代码
				/*
				out[o++] = 0x20;
				out[o++] = 0x20;
				*/
			} else {
				out[o++] = char_e2a(ch);
			}
		}
		//out[o] = '\0';
		return out;
	}
	/**
	 * 得到A2E后的数据长度
	 */
	public static int getA2ELen(char[] in) {
		int i =0;
		int len=in.length;
		char ch;
		int num_of_space_for_chinese = 0;

		for (i = 0; i < in.length; i++) {
			ch = in[i];
			if (is_GBK(ch)) {
				while ((i < in.length) && is_GBK(ch)) {
					i+=2;
					if(i<in.length)
						ch = in[i];
				}
				num_of_space_for_chinese += 2;
			}
		}
		return len+num_of_space_for_chinese;
	}
	/**
	 * 得到E2A后的数据长度
	 * @param in 数据集
	 * @return len 数据长度
	 */
	public static int getE2ALen(char[] in) {
		int i = 0;
		int len=in.length;
		char ch;
		for (i = 0; i < len; i++) {
			ch = in[i];
			if (is_EBC_chinese_begin(ch)) {
				ch = in[++i];
				while ((i < len) && !(is_EBC_chinese_end(ch))) {
					i+=2;
					if(i<len)
						ch = in[i];
				}
				len-=2;//如果是有中文字符串那么转换后的长度就会小2位
			}
		}
		return len;
	}

	public static char[][] GBK1_to_EBC1_Table = {

			/* 第 1 区 */
			{ 0x40, 0x40, 0x43, 0x44, 0x43, 0x41, 0x43, 0x45, 0x45, 0x45, 0x45,
					0x46, 0x44, 0x60, 0x44, 0x5B, 0x44, 0x5D, 0x44, 0x4A, 0x43,
					0xA1, 0x44, 0x7C, 0x44, 0x40, 0x44, 0x61, 0x44, 0x71, 0x44,
					0x62, 0x44, 0x72, 0x44, 0x63, 0x44, 0x73, 0x44, 0x64, 0x44,
					0x74, 0x44, 0x65, 0x44, 0x75, 0x43, 0x42, 0x43, 0x43, 0x44,
					0x42, 0x44, 0x43, 0x45, 0x5B, 0x45, 0x5C, 0x44, 0x66, 0x44,
					0x76, 0x44, 0x4B, 0x44, 0x7A, 0x44, 0x7B, 0x45, 0x62, 0x45,
					0x63, 0x45, 0x64, 0x45, 0x65, 0x45, 0x66, 0x45, 0x67, 0x45,
					0x68, 0x45, 0x69, 0x45, 0x6A, 0x45, 0x6B, 0x45, 0x6C, 0x45,
					0x6D, 0x45, 0x6E, 0x45, 0x6F, 0x45, 0x70, 0x45, 0x71, 0x45,
					0x72, 0x45, 0x73, 0x45, 0x74, 0x45, 0x75, 0x45, 0x76, 0x45,
					0x77, 0x44, 0x4C, 0x45, 0x79, 0x45, 0x7A, 0x44, 0x67, 0x44,
					0x77, 0x44, 0x4D, 0x44, 0x78, 0x44, 0x68, 0x44, 0x69, 0x44,
					0x79, 0x44, 0xED, 0x44, 0xEE, 0x44, 0xEF, 0x44, 0x4E, 0x42,
					0xE0, 0x45, 0x88, 0x43, 0x4A, 0x42, 0x4A, 0x45, 0x8B, 0x44,
					0x6A, 0x44, 0x6E, 0x44, 0xE5, 0x44, 0xE6, 0x44, 0xE0, 0x44,
					0xE1, 0x44, 0xE4, 0x44, 0xE7, 0x44, 0xE8, 0x44, 0xE9, 0x44,
					0xEA, 0x44, 0xE2, 0x44, 0xE3, 0x44, 0x6B, 0x44, 0xF0, 0x44,
					0xF1, 0x44, 0xF2, 0x44, 0xF3, 0x44, 0x7D },

			/* 第 2 区 */
			{ 0x41, 0xB1, 0x41, 0xB2, 0x41, 0xB3, 0x41, 0xB4, 0x41, 0xB5, 0x41,
					0xB6, 0x41, 0xB7, 0x41, 0xB8, 0x41, 0xB9, 0x41, 0xBA, 0xFE,
					0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0x45, 0xB1, 0x45, 0xB2, 0x45, 0xB3, 0x45, 0xB4, 0x45,
					0xB5, 0x45, 0xB6, 0x45, 0xB7, 0x45, 0xB8, 0x45, 0xB9, 0x45,
					0xBA, 0x45, 0xBB, 0x45, 0xBC, 0x45, 0xBD, 0x45, 0xBE, 0x45,
					0xBF, 0x45, 0xC0, 0x45, 0xC1, 0x45, 0xC2, 0x45, 0xC3, 0x45,
					0xC4, 0x45, 0xC5, 0x45, 0xC6, 0x45, 0xC7, 0x45, 0xC8, 0x45,
					0xC9, 0x45, 0xCA, 0x45, 0xCB, 0x45, 0xCC, 0x45, 0xCD, 0x45,
					0xCE, 0x45, 0xCF, 0x45, 0xD0, 0x45, 0xD1, 0x45, 0xD2, 0x45,
					0xD3, 0x45, 0xD4, 0x45, 0xD5, 0x45, 0xD6, 0x45, 0xD7, 0x45,
					0xD8, 0x45, 0xE1, 0x45, 0xE2, 0x45, 0xE3, 0x45, 0xE4, 0x45,
					0xE5, 0x45, 0xE6, 0x45, 0xE7, 0x45, 0xE8, 0x45, 0xE9, 0x45,
					0xEA, 0xFE, 0xFE, 0xFE, 0xFE, 0x45, 0xF1, 0x45, 0xF2, 0x45,
					0xF3, 0x45, 0xF4, 0x45, 0xF5, 0x45, 0xF6, 0x45, 0xF7, 0x45,
					0xF8, 0x45, 0xF9, 0x45, 0xFA, 0xFE, 0xFE, 0xFE, 0xFE, 0x41,
					0xF1, 0x41, 0xF2, 0x41, 0xF3, 0x41, 0xF4, 0x41, 0xF5, 0x41,
					0xF6, 0x41, 0xF7, 0x41, 0xF8, 0x41, 0xF9, 0x41, 0xFA, 0x41,
					0xFB, 0x41, 0xFC, 0xFE, 0xFE, 0xFE, 0xFE },

			/* 第 3 区 */
			{ 0x42, 0x5A, 0x42, 0x40, 0x42, 0x7B, 0x42, 0x5B, 0x42, 0x6C, 0x42,
					0x50, 0x44, 0x50, 0x42, 0x4D, 0x42, 0x5D, 0x42, 0x5C, 0x42,
					0x4E, 0x42, 0x6B, 0x42, 0x60, 0x42, 0x4B, 0x42, 0x61, 0x42,
					0xF0, 0x42, 0xF1, 0x42, 0xF2, 0x42, 0xF3, 0x42, 0xF4, 0x42,
					0xF5, 0x42, 0xF6, 0x42, 0xF7, 0x42, 0xF8, 0x42, 0xF9, 0x42,
					0x7A, 0x42, 0x5E, 0x42, 0x4C, 0x42, 0x7E, 0x42, 0x6E, 0x42,
					0x6F, 0x42, 0x7C, 0x42, 0xC1, 0x42, 0xC2, 0x42, 0xC3, 0x42,
					0xC4, 0x42, 0xC5, 0x42, 0xC6, 0x42, 0xC7, 0x42, 0xC8, 0x42,
					0xC9, 0x42, 0xD1, 0x42, 0xD2, 0x42, 0xD3, 0x42, 0xD4, 0x42,
					0xD5, 0x42, 0xD6, 0x42, 0xD7, 0x42, 0xD8, 0x42, 0xD9, 0x42,
					0xE2, 0x42, 0xE3, 0x42, 0xE4, 0x42, 0xE5, 0x42, 0xE6, 0x42,
					0xE7, 0x42, 0xE8, 0x42, 0xE9, 0x44, 0x44, 0x43, 0xE0, 0x44,
					0x45, 0x44, 0x70, 0x42, 0x6D, 0x42, 0x79, 0x42, 0x81, 0x42,
					0x82, 0x42, 0x83, 0x42, 0x84, 0x42, 0x85, 0x42, 0x86, 0x42,
					0x87, 0x42, 0x88, 0x42, 0x89, 0x42, 0x91, 0x42, 0x92, 0x42,
					0x93, 0x42, 0x94, 0x42, 0x95, 0x42, 0x96, 0x42, 0x97, 0x42,
					0x98, 0x42, 0x99, 0x42, 0xA2, 0x42, 0xA3, 0x42, 0xA4, 0x42,
					0xA5, 0x42, 0xA6, 0x42, 0xA7, 0x42, 0xA8, 0x42, 0xA9, 0x42,
					0xC0, 0x42, 0x4F, 0x42, 0xD0, 0x42, 0xA1 },

			/* 第 4 区 */
			{ 0x44, 0x47, 0x44, 0x81, 0x44, 0x48, 0x44, 0x82, 0x44, 0x49, 0x44,
					0x83, 0x44, 0x51, 0x44, 0x84, 0x44, 0x52, 0x44, 0x85, 0x44,
					0x86, 0x44, 0xC0, 0x44, 0x87, 0x44, 0xC1, 0x44, 0x88, 0x44,
					0xC2, 0x44, 0x89, 0x44, 0xC3, 0x44, 0x8A, 0x44, 0xC4, 0x44,
					0x8C, 0x44, 0xC5, 0x44, 0x8D, 0x44, 0xC6, 0x44, 0x8E, 0x44,
					0xC7, 0x44, 0x8F, 0x44, 0xC8, 0x44, 0x90, 0x44, 0xC9, 0x44,
					0x91, 0x44, 0xCA, 0x44, 0x92, 0x44, 0xCB, 0x44, 0x56, 0x44,
					0x93, 0x44, 0xCC, 0x44, 0x94, 0x44, 0xCD, 0x44, 0x95, 0x44,
					0xCE, 0x44, 0x96, 0x44, 0x97, 0x44, 0x98, 0x44, 0x99, 0x44,
					0x9A, 0x44, 0x9D, 0x44, 0xCF, 0x44, 0xD5, 0x44, 0x9E, 0x44,
					0xD0, 0x44, 0xD6, 0x44, 0x9F, 0x44, 0xD1, 0x44, 0xD7, 0x44,
					0xA2, 0x44, 0xD2, 0x44, 0xD8, 0x44, 0xA3, 0x44, 0xD3, 0x44,
					0xD9, 0x44, 0xA4, 0x44, 0xA5, 0x44, 0xA6, 0x44, 0xA7, 0x44,
					0xA8, 0x44, 0x53, 0x44, 0xA9, 0x44, 0x54, 0x44, 0xAA, 0x44,
					0x55, 0x44, 0xAC, 0x44, 0xAD, 0x44, 0xAE, 0x44, 0xAF, 0x44,
					0xBA, 0x44, 0xBB, 0x44, 0x57, 0x44, 0xBC, 0x44, 0xDA, 0x44,
					0xDB, 0x44, 0x46, 0x44, 0xBD, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE },

			/* 第 5 区 */
			{ 0x43, 0x47, 0x43, 0x81, 0x43, 0x48, 0x43, 0x82, 0x43, 0x49, 0x43,
					0x83, 0x43, 0x51, 0x43, 0x84, 0x43, 0x52, 0x43, 0x85, 0x43,
					0x86, 0x43, 0xC0, 0x43, 0x87, 0x43, 0xC1, 0x43, 0x88, 0x43,
					0xC2, 0x43, 0x89, 0x43, 0xC3, 0x43, 0x8A, 0x43, 0xC4, 0x43,
					0x8C, 0x43, 0xC5, 0x43, 0x8D, 0x43, 0xC6, 0x43, 0x8E, 0x43,
					0xC7, 0x43, 0x8F, 0x43, 0xC8, 0x43, 0x90, 0x43, 0xC9, 0x43,
					0x91, 0x43, 0xCA, 0x43, 0x92, 0x43, 0xCB, 0x43, 0x56, 0x43,
					0x93, 0x43, 0xCC, 0x43, 0x94, 0x43, 0xCD, 0x43, 0x95, 0x43,
					0xCE, 0x43, 0x96, 0x43, 0x97, 0x43, 0x98, 0x43, 0x99, 0x43,
					0x9A, 0x43, 0x9D, 0x43, 0xCF, 0x43, 0xD5, 0x43, 0x9E, 0x43,
					0xD0, 0x43, 0xD6, 0x43, 0x9F, 0x43, 0xD1, 0x43, 0xD7, 0x43,
					0xA2, 0x43, 0xD2, 0x43, 0xD8, 0x43, 0xA3, 0x43, 0xD3, 0x43,
					0xD9, 0x43, 0xA4, 0x43, 0xA5, 0x43, 0xA6, 0x43, 0xA7, 0x43,
					0xA8, 0x43, 0x53, 0x43, 0xA9, 0x43, 0x54, 0x43, 0xAA, 0x43,
					0x55, 0x43, 0xAC, 0x43, 0xAD, 0x43, 0xAE, 0x43, 0xAF, 0x43,
					0xBA, 0x43, 0xBB, 0x43, 0x57, 0x43, 0xBC, 0x43, 0xDA, 0x43,
					0xDB, 0x43, 0x46, 0x43, 0xBD, 0x43, 0xD4, 0x43, 0x59, 0x43,
					0x5A, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE },

			/* 第 6 区 */
			{ 0x41, 0x61, 0x41, 0x62, 0x41, 0x63, 0x41, 0x64, 0x41, 0x65, 0x41,
					0x66, 0x41, 0x67, 0x41, 0x68, 0x41, 0x69, 0x41, 0x6A, 0x41,
					0x6B, 0x41, 0x6C, 0x41, 0x6D, 0x41, 0x6E, 0x41, 0x6F, 0x41,
					0x70, 0x41, 0x71, 0x41, 0x72, 0x41, 0x73, 0x41, 0x74, 0x41,
					0x75, 0x41, 0x76, 0x41, 0x77, 0x41, 0x78, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE, 0x41, 0x41, 0x41, 0x42, 0x41, 0x43, 0x41,
					0x44, 0x41, 0x45, 0x41, 0x46, 0x41, 0x47, 0x41, 0x48, 0x41,
					0x49, 0x41, 0x4A, 0x41, 0x4B, 0x41, 0x4C, 0x41, 0x4D, 0x41,
					0x4E, 0x41, 0x4F, 0x41, 0x50, 0x41, 0x51, 0x41, 0x52, 0x41,
					0x53, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x41,
					0x58, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x47, 0x41, 0x47, 0x42, 0x47,
					0x43, 0x47, 0x44, 0x47, 0x45, 0x47, 0x46, 0x47, 0x47, 0x47,
					0x48, 0x47, 0x49, 0x47, 0x4A, 0x47, 0x4B, 0x47, 0x4C, 0xFE,
					0xFE, 0xFE, 0xFE, 0x47, 0x4D, 0x47, 0x4E, 0x47, 0x4F, 0x47,
					0x50, 0x47, 0x51, 0xFE, 0xFE, 0x47, 0x52, 0x47, 0x53, 0xFE,
					0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE },

			/* 第 7 区 */
			{ 0x41, 0xC0, 0x41, 0xC1, 0x41, 0xC2, 0x41, 0xC3, 0x41, 0xC4, 0x41,
					0xC5, 0x41, 0xC6, 0x41, 0xC7, 0x41, 0xC8, 0x41, 0xC9, 0x41,
					0xCA, 0x41, 0xCB, 0x41, 0xCC, 0x41, 0xCD, 0x41, 0xCE, 0x41,
					0xCF, 0x41, 0xD0, 0x41, 0xD1, 0x41, 0xD2, 0x41, 0xD3, 0x41,
					0xD4, 0x41, 0xD5, 0x41, 0xD6, 0x41, 0xD7, 0x41, 0xD8, 0x41,
					0xD9, 0x41, 0xDA, 0x41, 0xDB, 0x41, 0xDC, 0x41, 0xDD, 0x41,
					0xDE, 0x41, 0xDF, 0x41, 0xE0, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x41, 0x80, 0x41, 0x81, 0x41,
					0x82, 0x41, 0x83, 0x41, 0x84, 0x41, 0x85, 0x41, 0x86, 0x41,
					0x87, 0x41, 0x88, 0x41, 0x89, 0x41, 0x8A, 0x41, 0x8B, 0x41,
					0x8C, 0x41, 0x8D, 0x41, 0x8E, 0x41, 0x8F, 0x41, 0x90, 0x41,
					0x91, 0x41, 0x92, 0x41, 0x93, 0x41, 0x94, 0x41, 0x95, 0x41,
					0x96, 0x41, 0x97, 0x41, 0x98, 0x41, 0x99, 0x41, 0x9A, 0x41,
					0x9B, 0x41, 0x9C, 0x41, 0x9D, 0x41, 0x9E, 0x41, 0x9F, 0x41,
					0xA0, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE },

			/* 第 8 区 */
			{ 0x46, 0x41, 0x46, 0x42, 0x46, 0x43, 0x46, 0x44, 0x46, 0x45, 0x46,
					0x46, 0x46, 0x47, 0x46, 0x48, 0x46, 0x49, 0x46, 0x4A, 0x46,
					0x4B, 0x46, 0x4C, 0x46, 0x4D, 0x46, 0x4E, 0x46, 0x4F, 0x46,
					0x50, 0x46, 0x51, 0x46, 0x52, 0x46, 0x53, 0x46, 0x54, 0x46,
					0x55, 0x46, 0x56, 0x46, 0x57, 0x46, 0x58, 0x46, 0x59, 0x46,
					0x5A, 0x46, 0x5B, 0x46, 0x5C, 0x46, 0x5D, 0x46, 0x5E, 0x46,
					0x5F, 0x46, 0x60, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0x46, 0x65, 0x46, 0x66, 0x46, 0x67, 0x46, 0x68, 0x46,
					0x69, 0x46, 0x6A, 0x46, 0x6B, 0x46, 0x6C, 0x46, 0x6D, 0x46,
					0x6E, 0x46, 0x6F, 0x46, 0x70, 0x46, 0x71, 0x46, 0x72, 0x46,
					0x73, 0x46, 0x74, 0x46, 0x75, 0x46, 0x76, 0x46, 0x77, 0x46,
					0x78, 0x46, 0x79, 0x46, 0x7A, 0x46, 0x7B, 0x46, 0x7C, 0x46,
					0x7D, 0x46, 0x7E, 0x46, 0x40, 0x46, 0x80, 0x46, 0x81, 0x46,
					0x82, 0x46, 0x83, 0x46, 0x84, 0x46, 0x85, 0x46, 0x86, 0x46,
					0x87, 0x46, 0x88, 0x46, 0x89, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE },

			/* 第 9 区 */
			{ 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x46, 0xA4, 0x46, 0xA5, 0x46,
					0xA6, 0x46, 0xA7, 0x46, 0xA8, 0x46, 0xA9, 0x46, 0xAA, 0x46,
					0xAB, 0x46, 0xAC, 0x46, 0xAD, 0x46, 0xAE, 0x46, 0xAF, 0x46,
					0xB0, 0x46, 0xB1, 0x46, 0xB2, 0x46, 0xB3, 0x46, 0xB4, 0x46,
					0xB5, 0x46, 0xB6, 0x46, 0xB7, 0x46, 0xB8, 0x46, 0xB9, 0x46,
					0xBA, 0x46, 0xBB, 0x46, 0xBC, 0x46, 0xBD, 0x46, 0xBE, 0x46,
					0xBF, 0x46, 0xC0, 0x46, 0xC1, 0x46, 0xC2, 0x46, 0xC3, 0x46,
					0xC4, 0x46, 0xC5, 0x46, 0xC6, 0x46, 0xC7, 0x46, 0xC8, 0x46,
					0xC9, 0x46, 0xCA, 0x46, 0xCB, 0x46, 0xCC, 0x46, 0xCD, 0x46,
					0xCE, 0x46, 0xCF, 0x46, 0xD0, 0x46, 0xD1, 0x46, 0xD2, 0x46,
					0xD3, 0x46, 0xD4, 0x46, 0xD5, 0x46, 0xD6, 0x46, 0xD7, 0x46,
					0xD8, 0x46, 0xD9, 0x46, 0xDA, 0x46, 0xDB, 0x46, 0xDC, 0x46,
					0xDD, 0x46, 0xDE, 0x46, 0xDF, 0x46, 0xE0, 0x46, 0xE1, 0x46,
					0xE2, 0x46, 0xE3, 0x46, 0xE4, 0x46, 0xE5, 0x46, 0xE6, 0x46,
					0xE7, 0x46, 0xE8, 0x46, 0xE9, 0x46, 0xEA, 0x46, 0xEB, 0x46,
					0xEC, 0x46, 0xED, 0x46, 0xEE, 0x46, 0xEF, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE } };

	public static char[][] GBK5_to_EBC5_Table = {
			{ 0xCD, 0x41, 0xCD, 0x42, 0xCD, 0x43, 0xCD, 0x44, 0xCD, 0x45, 0x44,
					0x7E, 0xCD, 0x46, 0xCD, 0x47, 0xCD, 0x48, 0xCD, 0x49, 0xCD,
					0x4A, 0xCD, 0x4B, 0xCD, 0x4C, 0xCD, 0x4D, 0xCD, 0x4E, 0xCD,
					0x4F, 0xCD, 0x50, 0xCD, 0x51, 0xCD, 0x52, 0xCD, 0x53, 0xCD,
					0x54, 0xCD, 0x55, 0xCD, 0x56, 0xCD, 0x57, 0xCD, 0x58, 0xCD,
					0x59, 0xCD, 0x5A, 0xCD, 0x5B, 0xCD, 0x5C, 0xCD, 0x5D, 0xCD,
					0x5E, 0xCD, 0x5F, 0xCD, 0x60, 0xCD, 0x61, 0xCD, 0x62, 0xCD,
					0x63, 0xCD, 0x64, 0xCD, 0x65, 0xCD, 0x66, 0xCD, 0x67, 0xCD,
					0x68, 0xCD, 0x69, 0xCD, 0x6A, 0xCD, 0x6B, 0xCD, 0x6C, 0xCD,
					0x6D, 0xCD, 0x6E, 0xCD, 0x6F, 0xCD, 0x70, 0xCD, 0x71, 0xCD,
					0x72, 0xCD, 0x73, 0xCD, 0x74, 0xCD, 0x75, 0xCD, 0x76, 0xCD,
					0x77, 0xCD, 0x78, 0xCD, 0x79, 0xCD, 0x7A, 0xCD, 0x7B, 0xCD,
					0x7C, 0xCD, 0x7D, 0xCD, 0x7E, 0xFE, 0xFE, 0xCD, 0x40, 0xCD,
					0x81, 0xCD, 0x82, 0xCD, 0x83, 0xCD, 0x84, 0xCD, 0x85, 0xCD,
					0x86, 0xCD, 0x87, 0xCD, 0x88, 0xCD, 0x89, 0xCD, 0x8A, 0x44,
					0xEC, 0x44, 0xEB, 0xCD, 0x8B, 0xCD, 0x8C, 0xCD, 0x8D, 0xCD,
					0x8E, 0xCD, 0x8F, 0xCD, 0x90, 0x44, 0x6C, 0xCD, 0x91, 0xCD,
					0x92, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE },
			{ 0xCD, 0x93, 0xCD, 0x94, 0xCD, 0x95, 0xCD, 0x96, 0xCD, 0x97, 0xCD,
					0x98, 0xCD, 0x99, 0xCD, 0x9A, 0xCD, 0x9B, 0xCD, 0x9C, 0xCD,
					0x9D, 0xCD, 0x9E, 0xCD, 0x9F, 0xCD, 0xA0, 0xCD, 0xA1, 0xCD,
					0xA2, 0xCD, 0xA3, 0xCD, 0xA4, 0xCD, 0xA5, 0xCD, 0xA6, 0xCD,
					0xA7, 0xCD, 0xA8, 0x42, 0x5F, 0x42, 0x6A, 0xFE, 0xFE, 0x44,
					0x6F, 0x44, 0x6D, 0xFE, 0xFE, 0x44, 0x5A, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE, 0x43, 0x58, 0x43, 0xBE, 0x43, 0xBF, 0x43,
					0xDC, 0x43, 0xDD, 0x44, 0x5E, 0x44, 0xDC, 0x44, 0xDD, 0xCD,
					0xA9, 0xCD, 0xAA, 0xCD, 0xAB, 0xCD, 0xAC, 0xCD, 0xAD, 0xCD,
					0xAE, 0xCD, 0xAF, 0xCD, 0xB0, 0xCD, 0xB1, 0xCD, 0xB2, 0xCD,
					0xB3, 0xCD, 0xB4, 0xCD, 0xB5, 0xCD, 0xB6, 0xCD, 0xB7, 0xCD,
					0xB8, 0xCD, 0xB9, 0xCD, 0xBA, 0xCD, 0xBB, 0xCD, 0xBC, 0xCD,
					0xBD, 0xCD, 0xBE, 0xCD, 0xBF, 0xFE, 0xFE, 0xCD, 0xC0, 0xCD,
					0xC1, 0xCD, 0xC2, 0xCD, 0xC3, 0xCD, 0xC4, 0xCD, 0xC5, 0xCD,
					0xC6, 0xCD, 0xC7, 0xCD, 0xC8, 0xCD, 0xC9, 0xCD, 0xCA, 0xCD,
					0xCB, 0xCD, 0xCC, 0xCD, 0xCD, 0xCD, 0xCE, 0xCD, 0xCF, 0xCD,
					0xD0, 0xCD, 0xD1, 0xCD, 0xD2, 0xCD, 0xD3, 0xCD, 0xD4, 0xCD,
					0xD5, 0x44, 0x5F, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
					0xFE, 0xFE, 0xFE } };

	/*
	 * GBK/1: GB2312 - 符号区 GBK : A1A1 --> A9FE
	 * 
	 */
	public static boolean is_GBK1(char[] i) {

		if (i[0] >= 0xa1 && i[0] <= 0xa9) {
			if (i[1] >= 0xa1 && i[1] <= 0xfe)
				return true;
		}

		return false;
	}

	/*
	 * GBK/2: GB2312 基本集 ( 6768 个汉字 ) GBK : B0A1 --> F7FE
	 * 
	 */
	public static boolean is_GBK2(char[] i) {

		if (i[0] >= 0xb0 && i[0] <= 0xf7) {
			if (i[1] >= 0xa1 && i[1] <= 0xfe)
				return true;
		}

		return false;
	}

	/*
	 * GBK/3 第 3 区 -> EBCDIC
	 * 
	 * GBK: 0x8140 --> 0xA0FE ( 不包括 xx7F )
	 * 
	 */
	public static boolean is_GBK3(char[] i) {

		if (i[0] >= 0x81 && i[0] <= 0xa0) {
			if (i[1] >= 0x40 && i[1] <= 0xfe && i[1] != 0x7f) {
				return true;
			}
		}

		return false;
	}

	/*
	 * GBK/4 第 4 区 -> EBCDIC
	 * 
	 * GBK: 0xAA40 --> 0xFEA0 ( 不包括 xx7F )
	 * 
	 */
	public static boolean is_GBK4(char[] i) {

		if (i[0] >= 0xaa && i[0] <= 0xfe) {
			if (i[1] >= 0x40 && i[1] <= 0xa0 && i[1] != 0x7f) {
				return true;
			}
		}

		return false;
	}

	/*
	 * GBK/5 第 5 区
	 * 
	 * GBK: 0xA840 --> 0xA9A0 ( 不包括 xx7F )
	 * 
	 */
	public static boolean is_GBK5(char[] i) {

		if (i[0] >= 0xa8 && i[0] <= 0xa9) {
			if (i[1] >= 0x40 && i[1] <= 0xa0 && i[1] != 0x7f) {
				return true;
			}
		}

		return false;
	}

	/*
	 * GBK/1: GB2312 - 符号区 GBK : A1A1 --> A9FE
	 * 
	 */
	public static char[] GBK1_to_EBC1(char[] i) {
		int h, l;
		char[] o = new char[2];
		h = i[0] - 0xa1;
		l = i[1] - 0xa1;

		o[0] = GBK1_to_EBC1_Table[h][l * 2];
		o[1] = GBK1_to_EBC1_Table[h][l * 2 + 1];

		return o;
	}

	/*
	 * GBK2 --> EBCDIC GBK : B0A1 --> F7FE EBC : 48A0 --> 6C9F HIGH (48 , 6C )
	 * LOW ( 41 , FD )
	 * 
	 */
	public static char[] GBK2_to_EBC2(char[] i) {
		int h, l;
		char[] o = new char[2];
		h = i[0] - 0xb0;
		if (h % 2 != 0)
			h++;
		h /= 2;

		h += 0x48;
		if (i[0] % 2 != 0) {
			if (i[1] < 0xe0)
				l = i[1] - 0x60;
			else
				l = i[1] - 0x5f;
		} else
			l = i[1] - 1;
		o[0] = (char) h;
		o[1] = (char) l;

		return o;
	}

	/*
	 * GBK/3 第 3 区 -> EBCDIC
	 * 
	 * GBK: 0x8140 --> 0xA0FE ( 不包括 xx7F )
	 * 
	 */
	public static char[] GBK3_to_EBC3(char[] i) {
		int h, l;
		char[] o = new char[2];
		l = (int) (i[1] + (i[0] - 0x81) * 2 + 1);

		if ((l >= 0x80) && (i[1] < 0x80))
			l += 1;
		h = i[0];
		if (l >= 0xfe) {
			l = l - 0xfe + 0x41;
			h += 1;
		}
		// 就一个 a0fe -> a180
		if (l == (char) 0x80)
			l += 1;

		/*
		 * GBK 的xx7f 替换为 xx40,但是测试结果不行，还得保留 xx7f if( o[1] == 0x7f ) l = 0x40;
		 */

		o[0] = (char) h;
		o[1] = (char) l;

		return o;
	}

	/*
	 * GBK/4 第 4 区 -> EBCDIC
	 * 
	 * GBK: 0xAA40 --> 0xFEA0 ( 不包括 xx7F )
	 * 
	 */
	public static char[] GBK4_to_EBC4(char[] i) {
		int h, l = 0;
		int a;
		int N;
		char[] o = new char[2];
		a = (i[0] << 8) + i[1];

		if (a < 0xfd9c) {
			N = (i[0] - 0xaa) * 0x60 + (i[1] - 0x40) - ((i[1] >= 0x80) ? 1 : 0);

			if (N < 0x7c) {
				h = 0xa1;
				l = 0x82 + N;
			} else {
				h = (N - 0x7c) / 0xbc + 0xa2;
				l = (N - 0x7c) % 0xbc + 0x41;
				if (l >= 0x80)
					l += 1;
			}
		} else {
			h = 0xce;

			if (i[0] == 0xfd) {
				l = i[1] - 0x9c + 0x41;
			}

			if (i[0] == 0xfe) {
				l = i[1] + 6;
				if (l >= 0x80 && l <= 0x84)
					l += 1;
			}
		}

		/*
		 * GBK 的xx7f 替换为 xx40,但是测试结果不行，还得保留 xx7f if( o[1] == 0x7f ) l = 0x40;
		 */

		o[0] = (char) h;
		o[1] = (char) l;

		return o;
	}

	/*
	 * GBK/4 第 4 区 -> EBCDIC
	 * 
	 * GBK: 0xA840 --> 0xA9A0 ( 不包括 xx7F )
	 * 
	 */
	public static char[] GBK5_to_EBC5(char[] i) {
		int h, l;
		char[] o = new char[2];
		h = i[0] - 0xa8;
		l = i[1] - 0x40;

		o[0] = GBK5_to_EBC5_Table[h][l * 2];
		o[1] = GBK5_to_EBC5_Table[h][l * 2 + 1];

		return o;
	}

	/*
	 * EBC1 : 没有规律 ， 所以从对照表中搜索
	 * 
	 */
	public static boolean is_EBC1(char[] i) {
		int ret;
		char[] o = new char[2];

		o = EBC1_to_GBK1(i);

		ret = o[0];// .........

		if (ret <= 0)
			return false;

		return true;
	}

	/*
	 * EBCDIC/2 EBC : 48A0 --> 6C9F HIGH (48 , 6C ) LOW ( 41 , FD ) 是 - 1 不是 - 0
	 */
	public static boolean is_EBC2(char[] i) {
		char h, l;

		h = i[0];
		l = i[1];

		if (h == 0x48) {
			if (l >= 0xA0 && l <= 0xfd)
				return true;
		}

		if (h >= 0x49 && h <= 0x6b) {
			if (l >= 0x41 && l <= 0xfd && l != 0x80)
				return true;
		}
		if (h == 0x6c) {

			if (l >= 0x41 && l <= 0x9f && l != 0x80)
				return true;
		}

		return false;
	}

	/*
	 * EBCDIC/3 --> GBK3 EBCDIC: 0x8141 --> 0xa0fd + 0xa181 不包括 xx80 是 - 1 不是 -
	 * 0
	 */

	public static boolean is_EBC3(char[] i) {
		char h, l;

		h = i[0];
		l = i[1];

		if (h >= 0x81 && h <= 0xa0) {
			if (l >= 0x41 && l <= 0xfd && l != 0x80) {
				return true;
			}
		}

		if (h == 0xa1 && l == 0x81)
			return true;

		return false;
	}

	/*
	 * EBCDIC/4 A182 --> CEA6 ( 去掉 CC68 --> CDxx 和 xx80)
	 * 
	 */
	public static boolean is_EBC4(char[] i) {

		char h, l;

		h = i[0];
		l = i[1];

		if (h == 0xa1) {
			if (l >= 0x82 && l <= 0xfd)
				return true;
		} else if (h > 0xa1 && h < 0xcc) {
			if (l >= 0x41 && l <= 0xfd && l != 0x80)
				return true;
		} else if (h == 0xcc) {
			if (l >= 0x41 && l <= 0x67)
				return true;
		} else if (h == 0xce) {
			if (l >= 0x41 && l <= 0xa6 && l != 0x80)
				return true;
		}

		return false;
	}

	/*
	 * EBC5 : 没有规律 ， 所以从对照表中搜索
	 * 
	 */
	public static boolean is_EBC5(char[] i) {
		int ret;
		char[] o = new char[2];

		o = EBC5_to_GBK5(i);

		ret = o[0];// ..............

		if (ret < 0)
			return false;

		return true;
	}

	/**
	 * EBCDIC/1 --> GBK1 没有规律,所以只能用预先定义好的对照表
	 * 
	 */
	public static char[] EBC1_to_GBK1(char[] i) {

		char h, l;
		char[] o = new char[2];
		for (h = 0; h < 9; h++) {
			for (l = 0; l < 94; l++) {
				if (GBK1_to_EBC1_Table[h][l * 2] == i[0]
						&& GBK1_to_EBC1_Table[h][l * 2 + 1] == i[1]) {
					o[0] = (char) (h + 0xa1);
					o[1] = (char) (l + 0xa1);

					return o;
				}
			}
		}

		return o;
	}

	/**
	 * EBCDIC/2 --> GBK2 EBC : 48A0 --> 6C9F HIGH (48 , 6C ) LOW ( 41 , FD )
	 */
	public static char[] EBC2_to_GBK2(char[] i) {
		int h, l;
		char[] o = new char[2];
		if (i[0] != 0x48) {
			h = i[0] - 0x48;
			h *= 2;

			if (i[1] <= 0x9f)
				h--;
			h = h + 0xb0;
			if (i[1] <= 0x9f) {
				if (i[1] < 0x81)
					l = i[1] + 0x60;
				else
					l = i[1] + 0x5f;
			} else {
				l = i[1] + 1;
			}
		} else {
			h = 0xb0;
			l = i[1] + 1;
		}

		o[0] = (char) h;
		o[1] = (char) l;
		return o;
	}

	/**
	 * EBCDIC/3 --> GBK3 EBCDIC: 0x8141 --> 0xa0fd + 0xa181 不包括 0x80xx
	 */
	public static char[] EBC3_to_GBK3(char[] i) {

		int h, l;
		char[] o = new char[2];
		l = i[1] - ((i[0] - 0x81) * 2 + 1);

		if (i[1] >= 0x80 && l <= 0x7f)
			l--;
		h = i[0];

		if (l < 0x40) {
			l = i[1] - 0x41 + 0x100 - ((i[0] - 0x81) * 2 + 1);
			h = i[0] - 1;
		}

		if (i[0] == 0xa1 && i[1] == 0x81)
			l--;

		o[0] = (char) h;
		o[1] = (char) l;

		return o;

	}

	/*
	 * EBCDIC/4 --> GBK3
	 * 
	 * EBCDIC: A82 --> CEA6 ( 去掉 CC68 --> CDxx 和 xx80) GBK : AA40 --> FEA0 ( 去掉
	 * xx7F)
	 */

	public static char[] EBC4_to_GBK4(char[] i) {

		int N;
		int h, l;
		char[] o = new char[2];
		if (i[0] == 0xa1) {
			N = i[1] - 0x82;
		} else if (i[0] >= 0xa2 && i[0] <= 0xcc) {
			N = (i[0] - 0xa2) * 0xbc + (i[1] - 0x41) + 0x7c;
			N -= (i[1] >= 0x80) ? 1 : 0;
		} else {
			N = (i[0] - 0xa2 - 1 - 1) * 0xbc + (i[1] - 0x41) + 0x7c + 0x27;
			N -= (i[1] >= 0x80) ? 1 : 0;
		}

		h = N / 0x60 + 0xaa;
		l = N % 0x60 + 0x40;

		if (l >= 0x7f)
			l += 1;

		o[0] = (char) h;
		o[1] = (char) l;

		return o;

	}

	/*
	 * EBCDIC/5 --> GBK5 没有规律,所以只能用预先定义好的对照表
	 * 
	 */
	public static char[] EBC5_to_GBK5(char[] i) {

		char h, l;
		char[] o = new char[2];
		
		/*增加转码 add by lizr*/
		if ((i[0] == 0x76) && (i[1] == 0x42)) {
			o[0] = 0xf8;
			o[1] = 0xab;
			return o;
		}
		/*增加结构 add by lizr*/
		for (h = 0; h <= 1; h++) {
			for (l = 0; l < 0x60; l++) {
				if (GBK5_to_EBC5_Table[h][l * 2] == i[0]
						&& GBK5_to_EBC5_Table[h][l * 2 + 1] == i[1]) {
					o[0] = (char) (h + 0xa8);
					o[1] = (char) (l + 0x40);

					return o;
				}
			}
		}

		return o;
	}

	/*
	 * ASCII --> EBCDIC
	 */

	public static char char_a2e(int in_ch) {
		char[] a2e_tab = { 0x00, 0x10, 0x20, 0x30, 0x70, 0x80, 0x90, 0x01,
				0x11, 0x21, 0x31, 0x41, 0x51, 0x71, 0xb1, 0xe1, 0x02, 0x12,
				0x22, 0x32, 0x42, 0x52, 0x62, 0x72, 0xb2, 0x03, 0x13, 0x23,
				0x33, 0x43, 0x53, 0x63, 0x40, 0x5a, 0x7f, 0x7b, 0xe0, 0x6c,
				0x50, 0x7d, 0x4d, 0x5d, 0x5c, 0x4e, 0x6b, 0x60, 0x4b, 0x61,
				0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9,
				0x7a, 0x5e, 0x4c, 0x7e, 0x6e, 0x6f, 0x7c, 0xc1, 0xc2, 0xc3,
				0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xd1, 0xd2, 0xd3, 0xd4,
				0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6,
				0xe7, 0xe8, 0xe9, 0xa0, 0x5b, 0xb0, 0x5f, 0x6d, 0x79, 0x81,
				0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x91, 0x92,
				0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0xa2, 0xa3, 0xa4,
				0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xc0, 0x6a, 0xd0, 0xa1, 0x73,
				0x4a, 0x4f, 0xb3, 0x04, 0x14, 0x24, 0x34, 0x44, 0x54, 0x64,
				0x74, 0xb4, 0x05, 0x15, 0x25, 0x35, 0x45, 0x55, 0x65, 0x75,
				0xb5, 0x06, 0x16, 0x26, 0x36, 0x46, 0x56, 0x66, 0x76, 0xb6,
				0x07, 0x17, 0x27, 0x37, 0x47, 0x57, 0x67, 0x77, 0xb7, 0x08,
				0x18, 0x28, 0x38, 0x48, 0x58, 0x68, 0x78, 0xb8, 0x09, 0x19,
				0x29, 0x39, 0x49, 0x59, 0x69, 0xb9, 0x0a, 0x1a, 0x2a, 0x3a,
				0x8a, 0x9a, 0xaa, 0xba, 0xca, 0xda, 0xea, 0xfa, 0x0b, 0x1b,
				0x2b, 0x3b, 0x8b, 0x9b, 0xab, 0xbb, 0xcb, 0xdb, 0xeb, 0xfb,
				0x0c, 0x1c, 0x2c, 0x3c, 0x8c, 0x9c, 0xac, 0xbc, 0xcc, 0xdc,
				0xec, 0xfc, 0x0d, 0x1d, 0x2d, 0x3d, 0x8d, 0x9d, 0xad, 0xbd,
				0xcd, 0xdd, 0xed, 0xfd, 0x0e, 0x1e, 0x2e, 0x3e, 0x8e, 0x9e,
				0xae, 0xbe, 0xce, 0xde, 0xee, 0xfe, 0x0f, 0x1f, 0x2f, 0x3f,
				0x8f, 0x9f, 0xaf, 0xbf, 0xcf, 0xdf, 0xef, 0xff };

		char out_ch = a2e_tab[in_ch];
		return out_ch;
	}

	/*
	 * convert EBCDIC code into ASCII code
	 */
	public static char char_e2a(int in_ch) {
		char[] e2a_tab = { 0x00, 0x07, 0x10, 0x19, 0x83, 0x8c, 0x95, 0x9e,
				0xa7, 0xb0, 0xb8, 0xc4, 0xd0, 0xdc, 0xe8, 0xf4, 0x01, 0x08,
				0x11, 0x1a, 0x84, 0x8d, 0x96, 0x9f, 0xa8, 0xb1, 0xb9, 0xc5,
				0xd1, 0xdd, 0xe9, 0xf5, 0x02, 0x09, 0x12, 0x1b, 0x85, 0x8e,
				0x97, 0xa0, 0xa9, 0xb2, 0xba, 0xc6, 0xd2, 0xde, 0xea, 0xf6,
				0x03, 0x0a, 0x13, 0x1c, 0x86, 0x8f, 0x98, 0xa1, 0xaa, 0xb3,
				0xbb, 0xc7, 0xd3, 0xdf, 0xeb, 0xf7, 0x20, 0x0b, 0x14, 0x1d,
				0x87, 0x90, 0x99, 0xa2, 0xab, 0xb4, 0x80, 0x2e, 0x3c, 0x28,
				0x2b, 0x7c, 0x26, 0x0c, 0x15, 0x1e, 0x88, 0x91, 0x9a, 0xa3,
				0xac, 0xb5, 0x21, 0x5c, 0x2a, 0x29, 0x3b, 0x5e, 0x2d, 0x2f,
				0x16, 0x1f, 0x89, 0x92, 0x9b, 0xa4, 0xad, 0xb6, 0x7c, 0x2c,
				0x25, 0x5f, 0x3e, 0x3f, 0x04, 0x0d, 0x17, 0x7f, 0x8a, 0x93,
				0x9c, 0xa5, 0xae, 0x60, 0x3a, 0x23, 0x40, 0x27, 0x3d, 0x22,
				0x05, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
				0xbc, 0xc8, 0xd4, 0xe0, 0xec, 0xf8, 0x06, 0x6a, 0x6b, 0x6c,
				0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0xbd, 0xc9, 0xd5, 0xe1,
				0xed, 0xf9, 0x5b, 0x7e, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
				0x79, 0x7a, 0xbe, 0xca, 0xd6, 0xe2, 0xee, 0xfa, 0x5d, 0x0e,
				0x18, 0x82, 0x8b, 0x94, 0x9d, 0xa6, 0xaf, 0xb7, 0xbf, 0xcb,
				0xd7, 0xe3, 0xef, 0xfb, 0x7b, 0x41, 0x42, 0x43, 0x44, 0x45,
				0x46, 0x47, 0x48, 0x49, 0xc0, 0xcc, 0xd8, 0xe4, 0xf0, 0xfc,
				0x7d, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52,
				0xc1, 0xcd, 0xd9, 0xe5, 0xf1, 0xfd, 0x24, 0x0f, 0x53, 0x54,
				0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0xc2, 0xce, 0xda, 0xe6,
				0xf2, 0xfe, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
				0x38, 0x39, 0xc3, 0xcf, 0xdb, 0xe7, 0xf3, 0xff };

		char out_ch;
		out_ch = e2a_tab[in_ch];
		return out_ch;
	}

	public static char[] GBK_to_EBC(char[] i) {
		char[] o = new char[2];
		if (is_GBK2(i)) // 最常用
		{
			o = GBK2_to_EBC2(i);
		} else if (is_GBK1(i)) {
			o = GBK1_to_EBC1(i);
		} else if (is_GBK3(i)) {
			o = GBK3_to_EBC3(i);
		} else if (is_GBK4(i)) {
			o = GBK4_to_EBC4(i);
		} else if (is_GBK5(i)) // 没有规律放在最后判断
		{
			o = GBK5_to_EBC5(i);
		}

		return o;
	}

	public static char[] EBC_to_GBK(char[] i) {
		char[] o = new char[2];
		if (is_EBC2(i)) // 最常用
		{
			o = EBC2_to_GBK2(i);
		} else if (is_EBC3(i)) {
			o = EBC3_to_GBK3(i);
		} else if (is_EBC4(i)) {
			o = EBC4_to_GBK4(i);
		} else if (is_EBC1(i)) {
			o = EBC1_to_GBK1(i);
		} else if (is_EBC5(i)) // 没有规律放在最后判断
		{
			o = EBC5_to_GBK5(i);
		}

		return o;
	}
	/**
	 * 是否为GBK码
	 * @param x
	 * @return
	 */
	public static boolean is_GBK(char x) {
		return (x > (char) 0x80) ? true : false;
	}
	/**
	 * 是否为EBCDIC码的中文开始符0x0E
	 * @param x
	 * @return
	 */
	public static boolean is_EBC_chinese_begin(char x) {
		return (x == (char) 0x0E) ? true : false;
	}
	/**
	 * 是否为EBCDIC码的中文结束符0x0F
	 * @param x
	 * @return
	 */
	public static boolean is_EBC_chinese_end(char x) {
		return (x == (char) 0x0F) ? true : false;

	}
}